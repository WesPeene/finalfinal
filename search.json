[
  {
    "objectID": "MODEL.html",
    "href": "MODEL.html",
    "title": "Model",
    "section": "",
    "text": "Code\nlibrary(reticulate)\nCode\nimport duckdb\nfrom pandas import get_dummies\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import preprocessing"
  },
  {
    "objectID": "MODEL.html#get-data",
    "href": "MODEL.html#get-data",
    "title": "Model",
    "section": "Get Data",
    "text": "Get Data\n\n\nCode\ncon = duckdb.connect('my-db.duckdb')\ndf = con.execute(\"SELECT * FROM penguins\").fetchdf().dropna()\ncon.close()\n\ndf.head(3)\n\n\n  species     island  bill_length_mm  ...  body_mass_g     sex  year\n0  Adelie  Torgersen            39.1  ...       3750.0    male  2007\n1  Adelie  Torgersen            39.5  ...       3800.0  female  2007\n2  Adelie  Torgersen            40.3  ...       3250.0  female  2007\n\n[3 rows x 8 columns]"
  },
  {
    "objectID": "MODEL.html#define-model-and-fit",
    "href": "MODEL.html#define-model-and-fit",
    "title": "Model",
    "section": "Define Model and Fit",
    "text": "Define Model and Fit\n\n\nCode\nX = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)\ny = df['body_mass_g']\n\nmodel = LinearRegression().fit(X, y)"
  },
  {
    "objectID": "MODEL.html#get-some-information",
    "href": "MODEL.html#get-some-information",
    "title": "Model",
    "section": "Get some information",
    "text": "Get some information\n\n\nCode\nprint(f\"R^2 {model.score(X,y)}\")\n\n\nR^2 0.8555368759537614\n\n\nCode\nprint(f\"Intercept {model.intercept_}\")\n\n\nIntercept 2169.269720939392\n\n\nCode\nprint(f\"Columns {X.columns}\")\n\n\nColumns Index(['bill_length_mm', 'species_Chinstrap', 'species_Gentoo', 'sex_male'], dtype='object')\n\n\nCode\nprint(f\"Coefficients {model.coef_}\")\n\n\nCoefficients [  32.53688677 -298.76553447 1094.86739145  547.36692408]\n\n\n\n\nCode\nfrom vetiver import VetiverModel\nv = VetiverModel(model, model_name = 'penguin_model', prototype_data = X)\n\n\n\n\nCode\nfrom pins import board_folder\nfrom vetiver import vetiver_pin_write\nb = board_folder('data/model', allow_pickle_read = True)\nvetiver_pin_write(b, v)\n\n\nModel Cards provide a framework for transparent, responsible reporting. \n Use the vetiver `.qmd` Quarto template as a place to start, \n with vetiver.model_card()\nWriting pin:\nName: 'penguin_model'\nVersion: 20240424T011015Z-517dd\n\n\n\n\nCode\nfrom vetiver import VetiverAPI\napp = VetiverAPI(v, check_prototype = True)\n\n\n\n\nCode\n#from vetiver import prepare_docker\n#prepare_docker(b, 'penguin_model')\n\n\n\n\n\nCode\n#import requests\n\n#req_data = {\n # \"bill_length_mm\": 0,\n  #\"species_Chinstrap\": False,\n  #\"species_Gentoo\": False,\n  #\"sex_male\": False\n#}\n#req = requests.post('http://127.0.0.1:8080/predict', json = [req_data])\n#res = req.json().get('predict')[0]\n#print(res)\n\n\n\n\nCode\n#library(httr2)\n#req &lt;- httr2::request(\"http://127.0.0.1:8080/predict\") |&gt;\n # httr2::req_body_json(\n  #  list(\n   #   list(\n    #    \"bill_length_mm\" = 0,\n     #   \"species_Chinstrap\" = FALSE,\n      #  \"species_Gentoo\" = FALSE,\n       # \"sex_male\" = FALSE\n      #)\n    #)\n  #) |&gt;\n  #httr2::req_perform()\n#res &lt;- httr2::resp_body_json(req)$predict[[1]]\n#res"
  },
  {
    "objectID": "APPpy.html",
    "href": "APPpy.html",
    "title": "Penguins Website",
    "section": "",
    "text": "from shiny import App, render, ui, reactive\nimport requests\n\napi_url = 'http://127.0.0.1:8080/predict'\n\napp_ui = ui.page_fluid(\n    ui.panel_title(\"Penguin Mass Predictor\"), \n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            [ui.input_slider(\"bill_length\", \"Bill Length (mm)\", 30, 60, 45, step = 0.1),\n            ui.input_select(\"sex\", \"Sex\", [\"Male\", \"Female\"]),\n            ui.input_select(\"species\", \"Species\", [\"Adelie\", \"Chinstrap\", \"Gentoo\"]),\n            ui.input_action_button(\"predict\", \"Predict\")]\n        ),\n        ui.panel_main(\n            ui.h2(\"Penguin Parameters\"),\n            ui.output_text_verbatim(\"vals_out\"),\n            ui.h2(\"Predicted Penguin Mass (g)\"), \n            ui.output_text(\"pred_out\")\n        )\n    )   \n)\n\ndef server(input, output, session):\n    @reactive.Calc\n    def vals():\n        d = {\n            \"bill_length_mm\" : input.bill_length(),\n            \"sex_Male\" : input.sex() == \"Male\",\n            \"species_Gentoo\" : input.species() == \"Gentoo\", \n            \"species_Chinstrap\" : input.species() == \"Chinstrap\"\n\n        }\n        return d\n    \n    @reactive.Calc\n    @reactive.event(input.predict)\n    def pred():\n        r = requests.post(api_url, json = vals())\n        return r.json().get('predict')[0]\n\n    @output\n    @render.text\n    def vals_out():\n        return f\"{vals()}\"\n\n    @output\n    @render.text\n    def pred_out():\n        return f\"{round(pred())}\"\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "FinalProjectPeene/MODEL.html",
    "href": "FinalProjectPeene/MODEL.html",
    "title": "Model",
    "section": "",
    "text": "Code\nimport duckdb\nfrom pandas import get_dummies\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import preprocessing"
  },
  {
    "objectID": "FinalProjectPeene/MODEL.html#get-data",
    "href": "FinalProjectPeene/MODEL.html#get-data",
    "title": "Model",
    "section": "Get Data",
    "text": "Get Data\n\n\nCode\ncon = duckdb.connect('my-db.duckdb')\ndf = con.execute(\"SELECT * FROM penguins\").fetchdf().dropna()\ncon.close()\n\ndf.head(3)\n\n\n  species     island  bill_length_mm  ...  body_mass_g     sex  year\n0  Adelie  Torgersen            39.1  ...       3750.0    male  2007\n1  Adelie  Torgersen            39.5  ...       3800.0  female  2007\n2  Adelie  Torgersen            40.3  ...       3250.0  female  2007\n\n[3 rows x 8 columns]"
  },
  {
    "objectID": "FinalProjectPeene/MODEL.html#define-model-and-fit",
    "href": "FinalProjectPeene/MODEL.html#define-model-and-fit",
    "title": "Model",
    "section": "Define Model and Fit",
    "text": "Define Model and Fit\n\n\nCode\nX = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)\ny = df['body_mass_g']\n\nmodel = LinearRegression().fit(X, y)"
  },
  {
    "objectID": "FinalProjectPeene/MODEL.html#get-some-information",
    "href": "FinalProjectPeene/MODEL.html#get-some-information",
    "title": "Model",
    "section": "Get some information",
    "text": "Get some information\n\n\nCode\nprint(f\"R^2 {model.score(X,y)}\")\n\n\nR^2 0.8555368759537614\n\n\nCode\nprint(f\"Intercept {model.intercept_}\")\n\n\nIntercept 2169.269720939392\n\n\nCode\nprint(f\"Columns {X.columns}\")\n\n\nColumns Index(['bill_length_mm', 'species_Chinstrap', 'species_Gentoo', 'sex_male'], dtype='object')\n\n\nCode\nprint(f\"Coefficients {model.coef_}\")\n\n\nCoefficients [  32.53688677 -298.76553447 1094.86739145  547.36692408]\n\n\n\n\nCode\nfrom vetiver import VetiverModel\nv = VetiverModel(model, model_name = 'penguin_model', prototype_data = X)\n\n\n\n\nCode\nfrom pins import board_folder\nfrom vetiver import vetiver_pin_write\nb = board_folder('data/model', allow_pickle_read = True)\nvetiver_pin_write(b, v)\n\n\nModel Cards provide a framework for transparent, responsible reporting. \n Use the vetiver `.qmd` Quarto template as a place to start, \n with vetiver.model_card()\nWriting pin:\nName: 'penguin_model'\nVersion: 20240424T011002Z-517dd\n\n\n\n\nCode\nfrom vetiver import VetiverAPI\napp = VetiverAPI(v, check_prototype = True)\n\n\n\n\nCode\n#from vetiver import prepare_docker\n#prepare_docker(b, 'penguin_model')\n\n\n\n\n\nCode\n#import requests\n\n#req_data = {\n # \"bill_length_mm\": 0,\n  #\"species_Chinstrap\": False,\n  #\"species_Gentoo\": False,\n  #\"sex_male\": False\n#}\n#req = requests.post('http://127.0.0.1:8080/predict', json = [req_data])\n#res = req.json().get('predict')[0]\n#print(res)\n\n\n\n\nCode\n#library(httr2)\n#req &lt;- httr2::request(\"http://127.0.0.1:8080/predict\") |&gt;\n # httr2::req_body_json(\n  #  list(\n   #   list(\n    #    \"bill_length_mm\" = 0,\n     #   \"species_Chinstrap\" = FALSE,\n      #  \"species_Gentoo\" = FALSE,\n       # \"sex_male\" = FALSE\n      #)\n    #)\n  #) |&gt;\n  #httr2::req_perform()\n#res &lt;- httr2::resp_body_json(req)$predict[[1]]\n#res"
  },
  {
    "objectID": "FinalProjectPeene/index.html",
    "href": "FinalProjectPeene/index.html",
    "title": "QUARTOPROJECT",
    "section": "",
    "text": "This is a Quarto website about the penguins Data Set"
  },
  {
    "objectID": "FinalProjectPeene/VISUAL.html",
    "href": "FinalProjectPeene/VISUAL.html",
    "title": "Penguins EDA",
    "section": "",
    "text": "Code\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(ggplot2)\nlibrary(dbplyr)\n\n\n\nAttaching package: 'dbplyr'\n\n\nThe following objects are masked from 'package:dplyr':\n\n    ident, sql\n\n\nCode\ncon &lt;- DBI::dbConnect(\n  duckdb::duckdb(), \n  dbdir = \"my-db.duckdb\"\n  )\ndf &lt;- dplyr::tbl(con, \"penguins\")\n\n\n\n\nCode\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n        ends_with(\"mm\") | ends_with(\"g\"),\n      \\(x) mean(x, na.rm = TRUE)\n      )\n    ) %&gt;%\n  dplyr::collect() %&gt;%\n  knitr::kable()\n\n\n`summarise()` has grouped output by \"species\". You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\n\n\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836"
  },
  {
    "objectID": "FinalProjectPeene/VISUAL.html#penguin-size-and-mass-by-sex-and-species",
    "href": "FinalProjectPeene/VISUAL.html#penguin-size-and-mass-by-sex-and-species",
    "title": "Penguins EDA",
    "section": "",
    "text": "Code\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(ggplot2)\nlibrary(dbplyr)\n\n\n\nAttaching package: 'dbplyr'\n\n\nThe following objects are masked from 'package:dplyr':\n\n    ident, sql\n\n\nCode\ncon &lt;- DBI::dbConnect(\n  duckdb::duckdb(), \n  dbdir = \"my-db.duckdb\"\n  )\ndf &lt;- dplyr::tbl(con, \"penguins\")\n\n\n\n\nCode\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n        ends_with(\"mm\") | ends_with(\"g\"),\n      \\(x) mean(x, na.rm = TRUE)\n      )\n    ) %&gt;%\n  dplyr::collect() %&gt;%\n  knitr::kable()\n\n\n`summarise()` has grouped output by \"species\". You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\n\n\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836"
  },
  {
    "objectID": "FinalProjectPeene/VISUAL.html#penguin-size-vs-mass-by-species",
    "href": "FinalProjectPeene/VISUAL.html#penguin-size-vs-mass-by-species",
    "title": "Penguins EDA",
    "section": "Penguin Size vs Mass by Species",
    "text": "Penguin Size vs Mass by Species\n\n\nCode\ndf %&gt;%\n  ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() + \n  geom_smooth(method = \"lm\")\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\nCode\nDBI::dbDisconnect(con)"
  },
  {
    "objectID": "VISUAL.html",
    "href": "VISUAL.html",
    "title": "Penguins EDA",
    "section": "",
    "text": "Code\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(ggplot2)\nlibrary(dbplyr)\n\n\n\nAttaching package: 'dbplyr'\n\n\nThe following objects are masked from 'package:dplyr':\n\n    ident, sql\n\n\nCode\ncon &lt;- DBI::dbConnect(\n  duckdb::duckdb(), \n  dbdir = \"my-db.duckdb\"\n  )\ndf &lt;- dplyr::tbl(con, \"penguins\")\n\n\n\n\nCode\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n        ends_with(\"mm\") | ends_with(\"g\"),\n      \\(x) mean(x, na.rm = TRUE)\n      )\n    ) %&gt;%\n  dplyr::collect() %&gt;%\n  knitr::kable()\n\n\n`summarise()` has grouped output by \"species\". You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\n\n\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836"
  },
  {
    "objectID": "VISUAL.html#penguin-size-and-mass-by-sex-and-species",
    "href": "VISUAL.html#penguin-size-and-mass-by-sex-and-species",
    "title": "Penguins EDA",
    "section": "",
    "text": "Code\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(ggplot2)\nlibrary(dbplyr)\n\n\n\nAttaching package: 'dbplyr'\n\n\nThe following objects are masked from 'package:dplyr':\n\n    ident, sql\n\n\nCode\ncon &lt;- DBI::dbConnect(\n  duckdb::duckdb(), \n  dbdir = \"my-db.duckdb\"\n  )\ndf &lt;- dplyr::tbl(con, \"penguins\")\n\n\n\n\nCode\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n        ends_with(\"mm\") | ends_with(\"g\"),\n      \\(x) mean(x, na.rm = TRUE)\n      )\n    ) %&gt;%\n  dplyr::collect() %&gt;%\n  knitr::kable()\n\n\n`summarise()` has grouped output by \"species\". You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\n\n\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836"
  },
  {
    "objectID": "VISUAL.html#penguin-size-vs-mass-by-species",
    "href": "VISUAL.html#penguin-size-vs-mass-by-species",
    "title": "Penguins EDA",
    "section": "Penguin Size vs Mass by Species",
    "text": "Penguin Size vs Mass by Species\n\n\nCode\ndf %&gt;%\n  ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() + \n  geom_smooth(method = \"lm\")\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\nCode\nDBI::dbDisconnect(con)"
  },
  {
    "objectID": "appR.html",
    "href": "appR.html",
    "title": "Penguins Website",
    "section": "",
    "text": "install.packages(\"shiny\")\n\nThe following package(s) will be installed:\n- shiny [1.8.1.1]\nThese packages will be installed into \"~/work/finalfinal/finalfinal/renv/library/R-4.3/x86_64-pc-linux-gnu\".\n\n# Installing packages --------------------------------------------------------\n- Installing shiny ...                          OK [linked from cache]\nSuccessfully installed 1 package in 5.1 milliseconds.\n\n\n\nlibrary(shiny)\n\napi_url &lt;- \"http://127.0.0.1:8080/predict\"\n\nui &lt;- fluidPage(\n  titlePanel(\"Penguin Mass Predictor\"),\n\n  # Model input values\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\n        \"bill_length\",\n        \"Bill Length (mm)\",\n        min = 30,\n        max = 60,\n        value = 45,\n        step = 0.1\n      ),\n      selectInput(\n        \"sex\",\n        \"Sex\",\n        c(\"Male\", \"Female\")\n      ),\n      selectInput(\n        \"species\",\n        \"Species\",\n        c(\"Adelie\", \"Chinstrap\", \"Gentoo\")\n      ),\n      # Get model predictions\n      actionButton(\n        \"predict\",\n        \"Predict\"\n      )\n    ),\n\n    mainPanel(\n      h2(\"Penguin Parameters\"),\n      verbatimTextOutput(\"vals\"),\n      h2(\"Predicted Penguin Mass (g)\"),\n      textOutput(\"pred\")\n    )\n  )\n)\n\nserver &lt;- function(input, output) {\n  # Input params\n  vals &lt;- reactive(\n    list(\n      bill_length_mm = input$bill_length,\n      species_Chinstrap = input$species == \"Chinstrap\",\n      species_Gentoo = input$species == \"Gentoo\",\n      sex_male = input$sex == \"Male\"\n    )\n  )\n\n  # Fetch prediction from API\n  pred &lt;- eventReactive(\n    input$predict,\n    httr2::request(api_url) |&gt;\n      httr2::req_body_json(vals()) |&gt;\n      httr2::req_perform() |&gt;\n      httr2::resp_body_json(),\n    ignoreInit = TRUE\n  )\n\n  # Render to UI\n  output$pred &lt;- renderText(pred()$predict[[1]])\n  output$vals &lt;- renderPrint(vals())\n}\n\n# Run the application\nshinyApp(ui = ui, server = server)\n\nShiny applications not supported in static R Markdown documents"
  },
  {
    "objectID": "FinalProjectPeene/about.html",
    "href": "FinalProjectPeene/about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "FinalProjectPeene/dataloadpy.html",
    "href": "FinalProjectPeene/dataloadpy.html",
    "title": "Penguins Website",
    "section": "",
    "text": "#import duckdb\n#from palmerpenguins import penguins\n\n#con = duckdb.connect('my-db.duckdb')\n#df = penguins.load_penguins()\n#con.execute('CREATE TABLE penguins AS SELECT * FROM df')\n#con.close()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "QUARTOPROJECT",
    "section": "",
    "text": "This is a Quarto website about the penguins Data Set"
  }
]